require 'spec_helper'
require 'ronin/code/sql/fragment'
require 'ronin/code/sql/function'

describe Code::SQL::Fragment do
  describe "#to_sql" do
    it "should encode fragments with no elements" do
      frag = described_class.new []

      frag.to_sql.should == ''
    end

    it "should encode fragments with one element" do
      frag = described_class.new [:id]

      frag.to_sql.should == 'id'
    end

    it "should encode fragments with more than one element" do
      frag = described_class.new [:drop_table, :users]

      frag.to_sql.should == 'drop_table users'
    end
  end

  describe "to_sqli" do
    subject { Code::SQL::Fragment.new [:and, '1', :eq, '1'] }

    it "should encode the SQL fragment when not escaping anything" do
      subject.to_sqli.should == "and '1' = '1'"
    end

    it "should allow comment termination of the SQL fragment" do
      sqli = subject.to_sqli(:terminate => true)
      
      sqli.should == "and '1' = '1'--"
    end

    context "when escaping integers" do
      subject { described_class.new [:and, 1, :eq, 1] }

      it "should escape from integer values" do
        sqli = subject.to_sqli(:escape => :integer, :value => 1)

        sqli.should == " and 1 = 1"
      end

      it "should escape from string values and terminate with a comment" do
        sqli = subject.to_sqli(:escape => :string, :value => 1)

        sqli.should == "' and 1 = 1--"
      end
    end

    context "when escaping strings" do
      it "should escape from string values and balance the number of quotes" do
        sqli = subject.to_sqli(:escape => :string, :value => 1)

        sqli.should == "' and '1' = '1"
      end
    end

    context "when escaping statements" do
      it "should escape from other SQL statements" do
        sqli = subject.to_sqli(:escape => :statement)

        sqli.should == ";and '1' = '1'"
      end
    end
  end
end
