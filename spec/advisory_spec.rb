require 'spec_helper'
require 'ronin/advisory'

describe Advisory do
  let(:publisher) { 'CVE' }
  let(:year)      { 2011  }
  let(:number)    { 1234  }

  subject do
    described_class.new(
      publisher: publisher,
      year:      year,
      number:    number
    )
  end

  describe "split" do
    subject { described_class }

    it "should split NAME-YEAR-NUMBER identifier Strings" do
      components = subject.split("#{publisher}-#{year}-#{number}")

      expect(components).to eq([publisher, year, number])
    end

    it "should split NAME-NUMBER identifier Strings" do
      components = subject.split("#{publisher}-#{number}")

      expect(components).to eq([publisher, nil, number])
    end

    it "should return nil for unrecognized formats" do
      expect(subject.split("#{publisher}_#{year}_#{number}")).to be_nil
    end
  end

  describe "parse" do
    subject { described_class }

    it "should parse NAME-YEAR-NUMBER identifier Strings" do
      advisory = subject.parse("#{publisher}-#{year}-#{number}")

      expect(advisory.publisher).to eq(publisher)
      expect(advisory.year).to      eq(year)
      expect(advisory.number).to    eq(number)
    end

    it "should parse NAME-NUMBER identifier Strings" do
      advisory = subject.parse("#{publisher}-#{number}")

      expect(advisory.publisher).to eq(publisher)
      expect(advisory.year).to      be_nil
      expect(advisory.number).to    eq(number)
    end
  end

  describe "[]" do
    subject { described_class }

    let(:advisory1) { "#{publisher}-#{year}-#{number}" }
    let(:advisory2) { "#{publisher}-#{number}"       }

    before(:all) do
      described_class.parse(advisory1).save
      described_class.parse(advisory2).save
    end

    it "should lookup NAME-YEAR-NUMBER identifier Strings" do
      advisory = subject[advisory1]

      expect(advisory.publisher).to eq(publisher)
      expect(advisory.year).to      eq(year)
      expect(advisory.number).to    eq(number)
    end

    it "should lookup NAME-NUMBER identifier Strings" do
      advisory = subject[advisory2]

      expect(advisory.publisher).to eq(publisher)
      expect(advisory.year).to      be_nil
      expect(advisory.number).to    eq(number)
    end
  end

  describe "#url" do
    it "should return a URL for CVE advisories" do
      advisory = described_class.new(
        publisher: 'CVE',
        year:      year,
        number:    number
      )

      expect(advisory.url).to eq("https://web.nvd.nist.gov/view/vuln/detail?vulnId=#{year}-#{number}")
    end

    it "should return a URL for OSVDB advisories" do
      advisory = described_class.new(
        publisher: 'OSVDB',
        number:    number
      )

      expect(advisory.url).to eq("https://osvdb.org/show/osvdb/#{number}")
    end

    it "should return nil for unknown publishers" do
      advisory = described_class.new(
        publisher: 'FOO',
        year:      year,
        number:    number
      )

      expect(advisory.url).to be_nil
    end
  end

  describe "#to_s" do
    it "should join the publisher and number" do
      expect(subject.to_s).to eq("#{publisher}-#{year}-#{number}")
    end
  end

  describe "#to_ary" do
    it "should splat the publisher and number" do
      advisory_publisher, advisory_year, advisory_number = subject

      expect(advisory_publisher).to eq(publisher)
      expect(advisory_year).to      eq(year)
      expect(advisory_number).to    eq(number)
    end
  end

  describe "#inspect" do
    it "should include the class, publisher and number" do
      expect(subject.inspect).to eq("#<#{described_class}: #{publisher}-#{year}-#{number}>")
    end
  end
end
