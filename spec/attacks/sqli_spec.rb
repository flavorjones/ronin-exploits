require 'spec_helper'

require 'ronin/attacks/sqli'

describe Attacks::SQLi do
  let(:query_param)   { 'id' }
  let(:original_data) { '2'  }

  let(:uri) { URI("http://testasp.vulnweb.com/showthread.asp?#{query_param}=#{original_data}") }
  let(:url) { URL.from(uri) }

  subject do
    described_class.new(
      :url           => url,
      :query_param   => query_param,
      :original_data => original_data
    )
  end

  describe "test", :network do
    subject { described_class }

    it "should find the vulnerable query parameter" do
      sqli = subject.test(uri)

      sqli.query_param.should == 'id'
    end
  end

  describe "#escape" do
    context "when original_value is an Integer" do
      subject { described_class.new(:original_data => '10').escape }

      it { should == 'integer' }
    end

    context "otherwise" do
      subject { described_class.new(:original_data => 'foo bar').escape }

      it { should == 'string' }
    end
  end

  describe "#quotes" do
    context "when #escape == 'string'" do
      subject { described_class.new(:escape => 'string').quotes }

      it { should == 'single' }
    end
  end

  describe "#inject" do
    context "when passed a Code::SQL::Fragment" do
      it "should call #to_sqli" do
        sql = Code.sql[:and, 1, :eq, 0]

        subject.inject(sql).should == "#{original_data} #{sql.to_sqli}"
      end

      it "should pass the formatting variables to #to_sqli" do
        sql  = Code.sql[:and, 1, :eq, 0]
        sqli = sql.to_sqli(:case => :upper)

        subject.case = :upper

        subject.inject(sql).should == "#{original_data} #{sqli}"
      end
    end

    context "when passed a String" do
      it "should return the String" do
        subject.inject("'").should == "'"
      end
    end

    context "when passed a Hash" do
      it "should pass it to Web#inject" do
        subject.inject(:append => "'").should == original_data + "'"
      end
    end
  end
end
