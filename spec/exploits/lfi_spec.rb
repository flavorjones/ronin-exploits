require 'spec_helper'
require 'ronin/exploits/lfi'

describe Exploits::LFI do
  let(:host)          { 'testasp.vulnweb.com' }
  let(:url_path)      { '/Templatize.asp' }
  let(:query_param)   { 'item' }

  let(:exploit) do
    described_class.new(
      :host            => host,
      :url_path        => url_path,
      :url_query_param => URLQueryParamName.new(:name => query_param),
    )
  end
  subject { exploit }

  describe "#leading" do
    it "should default to false" do
      subject.leading.should be_false
    end
  end

  describe "#traversal" do
    it "should default to the maximum traversal" do
      subject.traversal.should == described_class::MAX_TRAVERSAL
    end
  end

  describe "#terminate" do
    it "should default to false" do
      subject.terminate.should be_false
    end
  end

  describe "#platform" do
    it "should default to :unix" do
      subject.platform.should == :unix
    end
  end

  describe "#separator" do
    subject { exploit.separator }

    it { should == '/' }

    context "on Windows platforms" do
      before { exploit.platform = :windows }

      it { should == "\\" }
    end
  end

  describe "#escape_path" do
    let(:path) { 'etc/passwd' }

    it "should traverse up n directories" do
      escaped_path = subject.escape_path(path)

      escaped_path.should be_end_with(('../' * subject.traversal) + path)
    end

    context "with leading separator" do
      before { subject.leading = true }

      it "should prepend a directory separator too the path" do
        escaped_path = subject.escape_path(path)

        escaped_path.should be_end_with('/' + ('../' * subject.traversal) + path)
      end
    end

    context "with terminated paths" do
      before { subject.terminate = true }

      it "should terminating the path with a %0 character" do
        escaped_path = subject.escape_path(path)

        escaped_path.should be_end_with("#{path}%0")
      end
    end

    context "on Windows platforms" do
      let(:path) { "windows\\win.ini" }

      before { subject.platform = :windows }

      it "should traverse up n directories" do
        escaped_path = subject.escape_path(path)

        escaped_path.should be_end_with(("..\\" * subject.traversal) + path)
      end

      context "with leading separator" do
        before { subject.leading = true }

        it "should prepend a directory separator too the path" do
          escaped_path = subject.escape_path(path)

          escaped_path.should be_end_with("\\" + ("..\\" * subject.traversal) + path)
        end
      end

      context "with terminated paths" do
        before { subject.terminate = true }

        it "should terminating the path with a %0 character" do
          escaped_path = subject.escape_path(path)

          escaped_path.should be_end_with("#{path}%0")
        end
      end
    end
  end
end
