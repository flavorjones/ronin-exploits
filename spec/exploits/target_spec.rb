require 'spec_helper'
require 'ronin/exploits/target'

describe Exploits::Target do
  subject do
    described_class.new(
      params: {var: 1, test: 'hello'},
      exploit: {
        name: 'exploit with targets'
      }
    )
  end

  it "should not have an Arch by default" do
    subject.arch.should be_nil
  end

  it "should not have an OS by default" do
    subject.os.should be_nil
  end

  it "should not have targeted software by default" do
    subject.software.should be_nil
  end

  it "should have params" do
    subject.should be_param(:var)
    subject.should be_param(:test)
  end

  describe "params" do
    it "should contain target params" do
      subject.params[:var].should == 1
      subject.params[:test].should == 'hello'
    end

    it "should provide Hash like access to target params" do
      subject[:var].should == 1
      subject[:test].should == 'hello'
    end

    it "should be able to set params like a Hash" do
      subject[:var] = 2

      subject[:var].should == 2
    end

    it "should provide OStruct like access to target params" do
      subject.var.should == 1
      subject.test.should == 'hello'
    end

    it "should be able to set params like an OStruct" do
      subject.var = 2

      subject.var.should == 2
    end

    it "should be able to serialize and deserialize it's target params" do
      subject.save
      target = Exploits::Target.get(subject.id)

      target.params[:var].should == 1
      target.params[:test].should == 'hello'
    end

    it "should not raise TargetDataMissing when setting new params" do
      lambda {
        subject.bla = 'yes'
      }.should_not raise_error(Exploits::TargetDataMissing)

      subject.bla.should == 'yes'
    end

    it "should raise TargetDataMissing when accessing non-existant params" do
      lambda {
        subject.bla
      }.should raise_error(Exploits::TargetDataMissing)
    end
  end
end
