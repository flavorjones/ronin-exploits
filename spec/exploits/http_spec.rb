require 'spec_helper'
require 'ronin/exploits/http'

describe Exploits::HTTP do
  subject { described_class.new(name: 'example_httpd') }

  it "should initialize all parameters by default" do
    expect(subject.params).not_to be_empty
  end

  its(:default_port) { should == 80 }

  describe "#url_for" do
    let(:host)  { 'www.example.com' }
    let(:port)  { 8080 }
    let(:path)  { '/path' }
    let(:query) { 'q=1' }
    let(:query_params) { {'x' => '1', 'y' => '2'} }

    subject { described_class.new(host: host, port: port) }

    it "should use the host parameter" do
      expect(subject.url_for(path).host).to eq(host)
    end

    context "when host is not set" do
      subject { described_class.new }

      it "should raise a MissingParam exception" do
        expect {
          subject.url_for(path)
        }.to raise_error(Parameters::MissingParam)
      end
    end

    it "should use the port parameter" do
      expect(subject.url_for(path).port).to eq(port)
    end

    it "should include the path" do
      expect(subject.url_for(path).path).to eq(path)
    end

    it "should extract the query-string from the path" do
      url = subject.url_for("#{path}?#{query}")
        
      expect(url.path).to  eq(path)
      expect(url.query).to eq(query)
    end

    it "should merge query-params into the query string" do
      url = subject.url_for("#{path}?#{query}",query_params)
      
      expect(url.query).to include(query)
      expect(url.query_params['x']).to eq(query_params['x'])
      expect(url.query_params['y']).to eq(query_params['y'])
    end

    context "when url_prefix is set" do
      let(:prefix) { '/prefix' }

      it "should prefix the path" do
        exploit = described_class.new(
          host:       host,
          url_prefix: prefix
        )

        expect(exploit.url_for(path).path).to eq(prefix + path)
      end

      it "should ensure the path always begins with a '/'" do
        exploit = described_class.new(
          host:       host,
          url_prefix: prefix[1..-1]
        )

        expect(exploit.url_for(path).path).to eq(prefix + path)
      end
    end
  end
end
