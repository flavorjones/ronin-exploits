require 'spec_helper'
require 'ronin/exploits/web'

describe Exploits::Web do
  it "should initialize all parameters by default" do
    subject.params.should_not be_empty
  end

  describe "#url" do
    let(:exploit) do
      described_class.new(
        :host             => 'example.com',
        :url_path         => '/path',
        :url_query        => 'q=1',
        :url_query_params => {'x' => '1', 'y' => '1'}
      )
    end

    subject { exploit.url }

    it "should use the url_path property" do
      subject.path.should == exploit.url_path
    end

    it "should use the url_query property" do
      subject.query.should include(exploit.url_query)
    end

    it "should include the url_query_params parameter" do
      subject.query_params['x'].should == exploit.url_query_params['x']
      subject.query_params['y'].should == exploit.url_query_params['y']
    end
  end

  describe "#exploit_url" do
    let(:host)         { 'example.com' }
    let(:path)         { '/path' }
    let(:query)        { 'q=1' }
    let(:query_param)  { 'y' }
    let(:query_params) { {'x' => '1', query_param => '1'} }
    let(:injection)    { '../../../etc/passwd' }

    context "with url_query_param set" do
      let(:exploit) do
        described_class.new(
          :host             => host,
          :url_path         => path,
          :url_query        => query,
          :url_query_params => query_params,
          :url_query_param  => {:name => query_param}
        )
      end

      subject { exploit.exploit_url(injection) }

      it "should not change the URL scheme, host, port or path" do
        url = exploit.url

        subject.scheme.should == url.scheme
        subject.host.should   == url.host
        subject.port.should   == url.port
        subject.path.should   == url.path
      end

      it "should override the targeted query-param in the URL" do
        subject.query_params[exploit.url_query_param.name].should == injection
      end

      context "with additional query params" do
        let(:extra_param) { 'z' }
        let(:value)       { 'foo' }

        subject do
          exploit.exploit_url(injection, query_param => value, extra_param => value)
        end

        it "should merge in additional query params" do
          subject.query_params[extra_param].should == value
        end

        it "should not override the targeted query param" do
          subject.query_params[query_param].should == injection
        end
      end
    end

    context "without url_query_param set" do
      let(:exploit) do
        described_class.new(
          :host             => host,
          :url_path         => path,
          :url_query        => query,
          :url_query_params => query_params
        )
      end

      subject { exploit.exploit_url(injection) }

      it "should return the target URL" do
        subject.should == exploit.url
      end

      context "with additional query params" do
        let(:extra_param) { 'z' }
        let(:value)       { 'foo' }

        subject { exploit.exploit_url(injection, extra_param => value) }

        it "should merge in additional query params" do
          subject.query_params[extra_param].should == value
        end
      end
    end
  end
end
