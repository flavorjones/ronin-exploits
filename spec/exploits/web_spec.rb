require 'spec_helper'
require 'ronin/exploits/web'

describe Exploits::Web do
  it "should initialize all parameters by default" do
    subject.params.should_not be_empty
  end

  describe "#target_url" do
    let(:host)  { 'www.example.com' }
    let(:port)  { 8080 }
    let(:path)  { '/path' }
    let(:query) { 'q=1' }

    it "should use the host parameter" do
      exploit = described_class.new(:host => host)

      exploit.target_url.host.should == host
    end

    context "when host is not set" do
      it "should raise a MissingParam exception" do
        exploit = described_class.new(:url_path => '/')

        lambda {
          exploit.target_url
        }.should raise_error(Parameters::MissingParam)
      end
    end

    it "should use the port parameter" do
      exploit = described_class.new(:host => host, :port => port)

      exploit.target_url.port.should == port
    end

    it "should use the url_path property" do
      exploit = described_class.new(:host => host, :url_path => path)

      exploit.target_url.path.should == path
    end

    it "should use the url_query property" do
      exploit = described_class.new(
        :host      => host,
        :url_path  => path,
        :url_query => query
      )

      exploit.target_url.query.should == query
    end

    context "when url_prefix is set" do
      let(:prefix) { '/prefix' }

      it "should prefix the path" do
        exploit = described_class.new(
          :host       => host,
          :url_path   => path,
          :url_prefix => prefix
        )

        exploit.target_url.path.should == prefix + path
      end

      it "should ensure the path always begins with a '/'" do
        exploit = described_class.new(
          :host       => host,
          :url_path   => path,
          :url_prefix => prefix[1..-1]
        )

        exploit.target_url.path.should == prefix + path
      end
    end

    context "when url_query_params is set" do
      let(:query_params) { {'x' => '1', 'y' => '2'} }

      it "should merge url_query_params into the query string" do
        exploit = described_class.new(
          :host             => host,
          :url_path         => path,
          :url_query        => query,
          :url_query_params => query_params
        )

        exploit.target_url.query.should include(query)
        exploit.target_url.query_params['x'].should == query_params['x']
        exploit.target_url.query_params['y'].should == query_params['y']
      end
    end
  end
end
