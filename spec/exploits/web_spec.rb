require 'spec_helper'
require 'ronin/exploits/web'

describe Exploits::Web do
  it "should initialize all parameters by default" do
    expect(subject.params).not_to be_empty
  end

  describe "#url_query_param_value" do
    let(:query_param_name)  { 'q' }
    let(:query_param_value) { '1' }

    subject do
      described_class.new(
        host:             'example.com',
        url_path:         '/path',
        url_query:        "#{query_param_name}=#{query_param_value}",
        url_query_param:  {name: query_param_name},
        url_query_params: {'x' => '1', 'y' => '1'}
      )
    end

    it "should extract the value of the target query-param" do
      expect(subject.url_query_param_value).to eq(query_param_value)
    end

    context "when url_query does not contain the target query-param" do
      before { subject.url_query = '' }

      it "should return ''" do
        expect(subject.url_query_param_value).to be_empty
      end
    end
  end

  describe "#url" do
    let(:exploit) do
      described_class.new(
        host:             'example.com',
        url_path:         '/path',
        url_query:        'q=1',
        url_query_params: {'x' => '1', 'y' => '1'}
      )
    end

    subject { exploit.url }

    it "should use the url_path property" do
      expect(subject.path).to eq(exploit.url_path)
    end

    it "should use the url_query property" do
      expect(subject.query).to include(exploit.url_query)
    end

    it "should include the url_query_params parameter" do
      expect(subject.query_params['x']).to eq(exploit.url_query_params['x'])
      expect(subject.query_params['y']).to eq(exploit.url_query_params['y'])
    end
  end

  describe "#exploit_url" do
    let(:host)         { 'example.com' }
    let(:path)         { '/path' }
    let(:query)        { 'q=1' }
    let(:query_param)  { 'y' }
    let(:query_params) { {'x' => '1', query_param => '1'} }
    let(:injection)    { '../../../etc/passwd' }

    context "with url_query_param set" do
      let(:exploit) do
        described_class.new(
          host:             host,
          url_path:         path,
          url_query:        query,
          url_query_params: query_params,
          url_query_param:  {name: query_param}
        )
      end

      subject { exploit.exploit_url(injection) }

      it "should not change the URL scheme, host, port or path" do
        url = exploit.url

        expect(subject.scheme).to eq(url.scheme)
        expect(subject.host).to   eq(url.host)
        expect(subject.port).to   eq(url.port)
        expect(subject.path).to   eq(url.path)
      end

      it "should override the targeted query-param in the URL" do
        expect(subject.query_params[exploit.url_query_param.name]).to eq(injection)
      end

      context "with additional query params" do
        let(:extra_param) { 'z' }
        let(:value)       { 'foo' }

        subject do
          exploit.exploit_url(injection, query_param => value, extra_param => value)
        end

        it "should merge in additional query params" do
          expect(subject.query_params[extra_param]).to eq(value)
        end

        it "should not override the targeted query param" do
          expect(subject.query_params[query_param]).to eq(injection)
        end
      end
    end

    context "without url_query_param set" do
      let(:exploit) do
        described_class.new(
          host:             host,
          url_path:         path,
          url_query:        query,
          url_query_params: query_params
        )
      end

      subject { exploit.exploit_url(injection) }

      it "should return the target URL" do
        expect(subject).to eq(exploit.url)
      end

      context "with additional query params" do
        let(:extra_param) { 'z' }
        let(:value)       { 'foo' }

        subject { exploit.exploit_url(injection, extra_param => value) }

        it "should merge in additional query params" do
          expect(subject.query_params[extra_param]).to eq(value)
        end
      end
    end
  end
end
