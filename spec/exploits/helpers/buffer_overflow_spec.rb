# encoding: US-ASCII

require 'spec_helper'
require 'ronin/exploits/local'
require 'ronin/exploits/helpers/buffer_overflow'

describe Exploits::Helpers::BufferOverflow do
  subject do
    Exploits::Local.object do
      helper :buffer_overflow

      targeting do |t|
        t.targets_arch    :x86
        t.buffer_length = 256
        t.ip            = 0xffffaaaa
      end

      targeting do |t|
        t.targets_arch    :x86
        t.buffer_length = 256
        t.bp            = 0xffffbbbb
        t.ip            = 0xffffaaaa
      end

      targeting do |t|
        t.targets_arch         :i686
        t.buffer_length      = 256
        t.bp                 = 0xffffbbbb
        t.ip                 = 0xffffaabb
        t.stack_frame_repeat = 2
      end

      build { @buffer = build_buffer }
    end
  end

  it "should build a buffer overflow" do
    subject.target = subject.targets[0]
    subject.build!

    subject.buffer.length.should == (256 + 4*2)
    subject.buffer[256,4].should == "\xaa\xaa\xff\xff"
    subject.buffer[260,4].should == "\xaa\xaa\xff\xff"
  end

  it "should build a buffer overflow that includes the BP" do
    subject.target = subject.targets[1]
    subject.build!

    subject.buffer.length.should == (256 + 4*2)
    subject.buffer[256,4].should == "\xbb\xbb\xff\xff"
    subject.buffer[260,4].should == "\xaa\xaa\xff\xff"
  end

  it "should build a buffer overflow that has repeating stack frames" do
    subject.target = subject.targets[2]
    subject.build!

    subject.buffer.length.should == (256 + 4*4)
    subject.buffer[256,4].should == "\xbb\xbb\xff\xff"
    subject.buffer[260,4].should == "\xbb\xaa\xff\xff"
    subject.buffer[264,4].should == "\xbb\xbb\xff\xff"
    subject.buffer[268,4].should == "\xbb\xaa\xff\xff"
  end
end
