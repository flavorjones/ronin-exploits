#
# ronin-exploits - A Ruby library for ronin-rb that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2022 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This file is part of ronin-exploits.
#
# ronin-exploits is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ronin-exploits is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with ronin-exploits.  If not, see <https://www.gnu.org/licenses/>.
#

require 'ronin/exploits/mixins/junk'
require 'ronin/exploits/mixins/binary'
require 'ronin/exploits/mixins/nops'

module Ronin
  module Exploits
    module Mixins
      #
      # Generates a Structured Exception Handler (SEH) record.
      #
      # ## Example
      #
      #   include Mixins::SEH
      #
      #   def build
      #     nseh = 0x06eb9090 # short jump 6 bytes
      #     seh  = 0x1001ae86 # pop pop ret 1001AE86 SSLEAY32.DLL
      #
      #     buffer = junk(1024) + seh_record(nseh,seh) + nops(16) + payload
      #     # ...
      #   end
      #
      # @api public
      #
      # @since 1.0.0
      #
      module SEH
        include Junk
        include Binary
        include NOPS

        #
        # Creates a SEH record.
        #
        # @param [Integer] nseh
        #   The address to the next SEH record.
        #
        # @param [Integer] seh
        #   The address to the SEH exception handler for the record that we
        #   want to call.
        #
        # @return [String]
        #   The SEH record.
        #
        # @api public
        #
        def seh_record(nseh,seh)
          pack(:machine_word,nseh) + pack(:machine_word,seh)
        end
      end
    end
  end
end
