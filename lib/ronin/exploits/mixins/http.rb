#
# ronin-exploits - A Ruby library for ronin-rb that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2022 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This file is part of ronin-exploits.
#
# ronin-exploits is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ronin-exploits is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with ronin-exploits.  If not, see <https://www.gnu.org/licenses/>.
#

require 'ronin/support/network/http'
require 'ronin/support/network/http/mixin'
require 'ronin/exploits/params/base_url'

module Ronin
  module Exploits
    module Mixins
      #
      # Adds HTTP helper methods for communicating with a web server.
      #
      # @api public
      #
      # @since 1.0.0
      #
      module HTTP
        include Support::Network::HTTP::Mixin

        #
        # Adds the required `base_url` params to the exploit class.
        #
        # @param [Class<Ronin::Exploits::Exploit>] exploit
        #   The exploit class that included {Mixins::HTTP}.
        #
        # @api private
        #
        def self.included(exploit)
          exploit.include Params::BaseURL

          exploit.param :proxy, desc: 'The HTTP proxy to use'
          exploit.param :user_agent, Core::Params::Types::Enum.new(Support::Network::HTTP::USER_AGENTS.keys + [:random]), desc: 'The HTTP User-Agent to select'
          exploit.param :user_agent_string, desc: 'The HTTP User-Agent string to use'
        end

        #
        # Expands the URL or path into a fully qualitifed URL.
        #
        # @param [URI::HTTP, String] url_or_path
        #   The URL or path to expand.
        #
        # @return [URI::HTTP, URI::HTTPS]
        #   If a URL is given, it will be returned as a `URI::HTTP` or
        #   `URI::HTTPS` object. If a path was given, it will be joined with
        #   the `base_url` param and a `URI::HTTP` or `URI::HTTPS` object will
        #   be returned.
        #
        def url_for(url_or_path)
          params[:base_url].merge(url_or_path)
        end

        #
        # The HTTP proxy to use for all HTTP requests.
        #
        # @return [String, nil]
        #
        # @api private
        #
        def http_proxy
          params[:proxy]
        end

        #
        # The `User-Agent` to use for HTTP requests.
        #
        # @return [String, Symbol, :random, nil]
        #   The `User-Agent` string or an alias name (ex: `:chrome_linux`).
        #
        # @api private
        #
        def http_user_agent
          params[:user_agent_string] || params[:user_agent]
        end

        #
        # @!macro connect_kwargs
        #   @param [String, URI::HTTP, nil] proxy
        #     Optional proxy to use for the request.
        #   
        #   @param [String, Symbol, :random, nil] user_agent
        #     The default `User-Agent` string to add to each request.
        #
        #   @param [Boolean, Hash{Symbol => Object}, nil] ssl
        #     Specifies whether to enable SSL and/or the SSL context
        #     configuration.
        #   
        #   @option ssl [String, nil] :ca_bundle
        #     The path to the CA bundle directory or file.
        #   
        #   @option ssl [Ronin::Support::Crypto::Cert, OpenSSL::X509::Certificate, nil] :cert
        #     The certificate to use for the SSL/TLS connection.
        #   
        #   @option ssl [OpenSSL::X509::Store, nil] :cert_store
        #     The certificate store to use for the SSL/TLS connection.
        #   
        #   @option ssl [Array<(name, version, bits, alg_bits)>, nil] :ciphers
        #     The accepted ciphers to use for the SSL/TLS connection.
        #   
        #   @option ssl [Ronin::Support::Crypto::Cert, OpenSSL::X509::Certificate, nil] :extra_chain_cert
        #     The extra certificate to add to the SSL/TLS certificate chain.
        #   
        #   @option ssl [Ronin::Support::Crypto::Key::RSA, Crypto::Key::DSA, OpenSSL::PKey::RSA, OpenSSL::PKey::DSA, nil] :key
        #     The RSA or DSA key to use for the SSL/TLS connection.
        #   
        #   @option ssl [Integer, nil] :timeout
        #     The connection timeout limit.
        #   
        #   @option ssl [1, 1.1, 1.2, Symbol, nil] :version
        #     The desired SSL/TLS version.
        #   
        #   @option ssl [1, 1.1, 1.2, Symbol, nil] :min_version
        #     The minimum SSL/TLS version.
        #   
        #   @option ssl [1, 1.1, 1.2, Symbol, nil] :max_version
        #     The maximum SSL/TLS version.
        #   
        #   @option ssl [Proc, nil] :verify_callback
        #     The callback to use when verifying the server's certificate.
        #   
        #   @option ssl [Integer, nil] :verify_depth
        #     The verification depth limit.
        #   
        #   @option ssl [:none, :peer, :fail_if_no_peer_cert, Boolean, Integer, nil] :verify
        #     The verification mode.
        #   
        #   @option ssl [Boolean, nil] :verify_hostname
        #     Indicates whether to verify the server's hostname.
        #
        #   @param [Hash{Symbol => Object}] kwargs
        #     Aditional keyword arguments and headers for `Ronin::Support::Network::HTTP::Mixin#$0`.
        #
        #   @option kwargs [Hash{Symbol,String => String,Array}, nil] :headers
        #     Additional headers to add to each request.
        #

        #
        # @!macro request_kwargs
        #   @option kwargs [String, nil] :query
        #     The query-string to append to the request path.
        #   
        #   @option kwargs [Hash, nil] :query_params
        #     The query-params to append to the request path.
        #   
        #   @option kwargs [String, nil] :body
        #     The body of the request.
        #   
        #   @option kwargs [Hash, String, nil] :form_data
        #     The form data that may be sent in the body of the request.
        #   
        #   @option kwargs [String, nil] :user
        #     The user to authenticate as.
        #   
        #   @option kwargs [String, nil] :password
        #     The password to authenticate with.
        #   
        #   @option kwargs [Hash{Symbol,String => String}, nil] :headers
        #     Additional HTTP headers to use for the request.
        #

        #
        # Creates a HTTP connection to the host nad port.
        #
        # @param [String] host
        #   The host to connect to.
        #
        # @param [Integer] port
        #   The port to connect to.
        #
        # @!macro connect_kwargs
        #
        # @yield [http]
        #   If a block is given, it will be passed the newly created HTTP
        #   session object. Once the block returns, the HTTP session will be
        #   closed.
        #
        # @yieldparam [Ronin::Support::Network::HTTP] http
        #   The HTTP session object.
        #
        # @return [Ronin::Support::Network::HTTP, nil]
        #   The HTTP session object. If a block is given, then `nil` will be
        #   returned.
        #
        def http_connect(host=nil,port=nil, ssl:        nil,
                                            proxy:      http_proxy,
                                            user_agent: http_user_agent,
                                            **kwargs,&block)
          if (host == nil && port == nil)
            host = self.host
            port = self.port
            ssl  = params[:base_url].scheme == 'https'
          end

          super(host,port, ssl:        ssl,
                           proxy:      proxy,
                           user_agent: user_agent,
                           **kwargs,&block)
        end

        #
        # Creates a HTTP connection using the URI.
        #
        # @param [URI::HTTP, String] url
        #   The URI to connect to.
        #
        # @!macro connect_kwargs
        #
        # @yield [http]
        #   If a block is given, it will be passed the newly created HTTP
        #   session object. Once the block returns, the HTTP session will be
        #   closed.
        #
        # @yieldparam [Ronin::Support::Network::HTTP] http
        #   The HTTP session object.
        #
        # @return [Ronin::Support::Network::HTTP, nil]
        #   The HTTP session object. If a block is given, then `nil` will be
        #   returned.
        #
        def http_connect_uri(url=params[:base_url], ssl:        nil,
                                                    proxy:      http_proxy,
                                                    user_agent: http_user_agent,
                                                    **kwargs,&block)
          url = url_for(url)

          super(url, ssl:        ssl,
                     proxy:      proxy,
                     user_agent: user_agent,
                     **kwargs,&block)
        end

        #
        # Performs and arbitrary HTTP request.
        #
        # @param [Symbol, String] method
        #   The HTTP method to use for the request.
        #
        # @param [URI::HTTP, String] url_or_path
        #   Optional URL to create the HTTP request for.
        #
        # @!macro request_kwargs
        # @!macro connect_kwargs
        #
        # @yield [response]
        #   If a block is given it will be passed the received HTTP response.
        #
        # @yieldparam [Net::HTTPRresponse] response
        #   The received HTTP response object.
        #
        # @return [Net::HTTPResponse]
        #   The new HTTP Request object.
        #
        # @raise [ArgumentError]
        #   The `:method` option did not match a known `Net::HTTP` request
        #   class.
        #
        def http_request(method,url_or_path, ssl:        nil,
                                             proxy:      http_proxy,
                                             user_agent: http_user_agent,
                                             **kwargs,&block)
          url = url_for(url_or_path)

          super(method,url, ssl:        ssl,
                            proxy:      proxy,
                            user_agent: user_agent,
                            **kwargs,&block)
        end

        #
        # Sends an arbitrary HTTP request and returns the response status.
        #
        # @param [Symbol, String] method
        #   The HTTP method to use for the request.
        #
        # @param [URI::HTTP, String] url_or_path
        #   Optional URL to create the HTTP request for.
        #
        # @!macro request_kwargs
        # @!macro connect_kwargs
        #
        # @return [Integer]
        #   The status code of the response.
        #
        def http_response_status(method=:head,url_or_path, ssl:        nil,
                                                           proxy:      http_proxy,
                                                           user_agent: http_user_agent,
                                                           **kwargs)
          url = url_for(url_or_path)

          super(method,url, ssl:        ssl,
                            proxy:      proxy,
                            user_agent: user_agent,
                            **kwargs)
        end

        #
        # Sends a HTTP request and determines if the response status was 200.
        #
        # @param [Symbol, String] method
        #   The HTTP method to use for the request.
        #
        # @param [URI::HTTP, String] url_or_path
        #   Optional URL to create the HTTP request for.
        #
        # @!macro request_kwargs
        # @!macro connect_kwargs
        #
        # @return [Boolean]
        #   Indicates that the response status was 200.
        #
        def http_ok?(method=:head,url_or_path, ssl:        nil,
                                               proxy:      http_proxy,
                                               user_agent: http_user_agent,
                                               **kwargs)
          url = url_for(url_or_path)

          super(method,url, ssl:        ssl,
                            proxy:      proxy,
                            user_agent: user_agent,
                            **kwargs)
        end

        #
        # Sends an arbitrary HTTP request and returns the response headers.
        #
        # @param [Symbol, String] method
        #   The HTTP method to use for the request.
        #
        # @param [URI::HTTP, String] url_or_path
        #   Optional URL to create the HTTP request for.
        #
        # @!macro request_kwargs
        # @!macro connect_kwargs
        #
        # @return [Hash{String => String}]
        #   The response headers.
        #
        def http_response_headers(method=:head,url_or_path, ssl:        nil,
                                                            proxy:      http_proxy,
                                                            user_agent: http_user_agent,
                                                            **kwargs)
          url = url_for(url_or_path)

          super(method,url, ssl:        ssl,
                            proxy:      proxy,
                            user_agent: user_agent,
                            **kwargs)
        end

        #
        # Sends an HTTP request and returns the `Server` header.
        #
        # @param [URI::HTTP, String] url_or_path
        #   Optional URL to create the HTTP request for.
        #
        # @!macro request_kwargs
        # @!macro connect_kwargs
        #
        # @return [String, nil]
        #   The `Server` header.
        #
        def http_server_header(url_or_path, ssl:        nil,
                                            proxy:      http_proxy,
                                            user_agent: http_user_agent,
                                            **kwargs)
          url = url_for(url_or_path)

          super(url, ssl:        ssl,
                     proxy:      proxy,
                     user_agent: user_agent,
                     **kwargs)
        end

        #
        # Sends an HTTP request and returns the `X-Powered-By` header.
        #
        # @param [URI::HTTP, String] url_or_path
        #   Optional URL to create the HTTP request for.
        #
        # @!macro request_kwargs
        # @!macro connect_kwargs
        #
        # @return [String, nil]
        #   The `X-Powered-By` header.
        #
        def http_powered_by_header(url_or_path, ssl:        nil,
                                                proxy:      http_proxy,
                                                user_agent: http_user_agent,
                                                **kwargs)
          url = url_for(url_or_path)

          super(url, ssl:        ssl,
                     proxy:      proxy,
                     user_agent: user_agent,
                     **kwargs)
        end

        #
        # Sends an arbitrary HTTP request and returns the response body.
        #
        # @param [Symbol, String] method
        #   The HTTP method to use for the request.
        #
        # @param [URI::HTTP, String] url_or_path
        #   Optional URL to create the HTTP request for.
        #
        # @!macro request_kwargs
        # @!macro connect_kwargs
        #
        # @return [String]
        #   The response body.
        #
        def http_response_body(method=:get, url_or_path, ssl:        nil,
                                                         proxy:      http_proxy,
                                                         user_agent: http_user_agent,
                                                         **kwargs)
          url = url_for(url_or_path)

          super(method, url, ssl:        ssl,
                             proxy:      proxy,
                             user_agent: user_agent,
                             **kwargs)
        end

        #
        # Performs a `COPY` request for the given URI.
        #
        # @param [URI::HTTP, String] url_or_path
        #   Optional URL to create the HTTP request for.
        #
        # @!macro request_kwargs
        # @!macro connect_kwargs
        #
        # @yield [response]
        #   If a block is given it will be passed the received HTTP response.
        #
        # @yieldparam [Net::HTTPRresponse] response
        #   The received HTTP response object.
        #
        # @return [Net::HTTPResponse]
        #   The new HTTP Request object.
        #
        def http_copy(url_or_path, ssl:        nil,
                                   proxy:      http_proxy,
                                   user_agent: http_user_agent,
                                   **kwargs)
          url = url_for(url_or_path)

          super(url, ssl:        ssl,
                     proxy:      proxy,
                     user_agent: user_agent,
                     **kwargs)
        end

        #
        # Performs a `DELETE` request for the given URI.
        #
        # @param [URI::HTTP, String] url_or_path
        #   Optional URL to create the HTTP request for.
        #
        # @!macro request_kwargs
        # @!macro connect_kwargs
        #
        # @yield [response]
        #   If a block is given it will be passed the received HTTP response.
        #
        # @yieldparam [Net::HTTPRresponse] response
        #   The received HTTP response object.
        #
        # @return [Net::HTTPResponse]
        #   The new HTTP Request object.
        #
        def http_delete(url_or_path, ssl:        nil,
                                     proxy:      http_proxy,
                                     user_agent: http_user_agent,
                                     **kwargs,&block)
          url = url_for(url_or_path)

          super(url, ssl:        ssl,
                     proxy:      proxy,
                     user_agent: user_agent,
                     **kwargs)
        end

        #
        # Performs a `GET` request for the given URI.
        #
        # @param [URI::HTTP, String] url_or_path
        #   Optional URL to create the HTTP request for.
        #
        # @!macro request_kwargs
        # @!macro connect_kwargs
        #
        # @yield [response]
        #   If a block is given it will be passed the received HTTP response.
        #
        # @yieldparam [Net::HTTPRresponse] response
        #   The received HTTP response object.
        #
        # @return [Net::HTTPResponse]
        #   The new HTTP Request object.
        #
        def http_get(url_or_path, ssl:        nil,
                                  proxy:      http_proxy,
                                  user_agent: http_user_agent,
                                  **kwargs,&block)
          url = url_for(url_or_path)

          super(url, ssl:        ssl,
                     proxy:      proxy,
                     user_agent: user_agent,
                     **kwargs)
        end

        #
        # Performs a `GET` request for the given URI and returns the response
        # headers.
        #
        # @param [URI::HTTP, String] url_or_path
        #   Optional URL to create the HTTP request for.
        #
        # @!macro request_kwargs
        # @!macro connect_kwargs
        #
        # @return [Hash{String => String}]
        #   The response headers.
        #
        def http_get_headers(url_or_path, ssl:        nil,
                                          proxy:      http_proxy,
                                          user_agent: http_user_agent,
                                          **kwargs)
          url = url_for(url_or_path)

          super(url, ssl:        ssl,
                     proxy:      proxy,
                     user_agent: user_agent,
                     **kwargs)
        end

        #
        # Sends an HTTP request and returns the parsed `Set-Cookie`
        # header(s).
        #
        # @param [URI::HTTP, String] url_or_path
        #   Optional URL to create the HTTP request for.
        #
        # @!macro request_kwargs
        # @!macro connect_kwargs
        #
        # @return [Array<Ronin::Support::Network::HTTPSetCookie>, nil]
        #   The parsed `SetCookie` header(s).
        #
        def http_get_cookies(url_or_path, ssl:        nil,
                                          proxy:      http_proxy,
                                          user_agent: http_user_agent,
                                          **kwargs)
          url = url_for(url_or_path)

          super(url, ssl:        ssl,
                     proxy:      proxy,
                     user_agent: user_agent,
                     **kwargs)
        end

        #
        # Performs a `GET` request for the given URI and returns the response
        # body.
        #
        # @param [URI::HTTP, String] url_or_path
        #   Optional URL to create the HTTP request for.
        #
        # @!macro request_kwargs
        # @!macro connect_kwargs
        #
        # @return [String]
        #   The response body.
        #
        def http_get_body(url_or_path, ssl:        nil,
                                       proxy:      http_proxy,
                                       user_agent: http_user_agent,
                                       **kwargs)
          url = url_for(url_or_path)

          super(url, ssl:        ssl,
                     proxy:      proxy,
                     user_agent: user_agent,
                     **kwargs)
        end

        #
        # Performs a `HEAD` request for the given URI.
        #
        # @param [URI::HTTP, String] url_or_path
        #   Optional URL to create the HTTP request for.
        #
        # @!macro request_kwargs
        # @!macro connect_kwargs
        #
        # @yield [response]
        #   If a block is given it will be passed the received HTTP response.
        #
        # @yieldparam [Net::HTTPRresponse] response
        #   The received HTTP response object.
        #
        # @return [Net::HTTPResponse]
        #   The new HTTP Request object.
        #
        def http_head(url_or_path, ssl:        nil,
                                   proxy:      http_proxy,
                                   user_agent: http_user_agent,
                                   **kwargs,&block)
          url = url_for(url_or_path)

          super(url, ssl:        ssl,
                     proxy:      proxy,
                     user_agent: user_agent,
                     **kwargs)
        end

        #
        # Performs a `LOCK` request for the given URI.
        #
        # @param [URI::HTTP, String] url_or_path
        #   Optional URL to create the HTTP request for.
        #
        # @!macro request_kwargs
        # @!macro connect_kwargs
        #
        # @yield [response]
        #   If a block is given it will be passed the received HTTP response.
        #
        # @yieldparam [Net::HTTPRresponse] response
        #   The received HTTP response object.
        #
        # @return [Net::HTTPResponse]
        #   The new HTTP Request object.
        #
        def http_lock(url_or_path, ssl:        nil,
                                   proxy:      http_proxy,
                                   user_agent: http_user_agent,
                                   **kwargs,&block)
          url = url_for(url_or_path)

          super(url, ssl:        ssl,
                     proxy:      proxy,
                     user_agent: user_agent,
                     **kwargs)
        end

        #
        # Performs a `MKCOL` request for the given URI.
        #
        # @param [URI::HTTP, String] url_or_path
        #   Optional URL to create the HTTP request for.
        #
        # @!macro request_kwargs
        # @!macro connect_kwargs
        #
        # @yield [response]
        #   If a block is given it will be passed the received HTTP response.
        #
        # @yieldparam [Net::HTTPRresponse] response
        #   The received HTTP response object.
        #
        # @return [Net::HTTPResponse]
        #   The new HTTP Request object.
        #
        def http_mkcol(url_or_path, ssl:        nil,
                                    proxy:      http_proxy,
                                    user_agent: http_user_agent,
                                    **kwargs,&block)
          url = url_for(url_or_path)

          super(url, ssl:        ssl,
                     proxy:      proxy,
                     user_agent: user_agent,
                     **kwargs)
        end

        #
        # Performs a `MOVE` request for the given URI.
        #
        # @param [URI::HTTP, String] url_or_path
        #   Optional URL to create the HTTP request for.
        #
        # @!macro request_kwargs
        # @!macro connect_kwargs
        #
        # @yield [response]
        #   If a block is given it will be passed the received HTTP response.
        #
        # @yieldparam [Net::HTTPRresponse] response
        #   The received HTTP response object.
        #
        # @return [Net::HTTPResponse]
        #   The new HTTP Request object.
        #
        def http_move(url_or_path, ssl:        nil,
                                   proxy:      http_proxy,
                                   user_agent: http_user_agent,
                                   **kwargs,&block)
          url = url_for(url_or_path)

          super(url, ssl:        ssl,
                     proxy:      proxy,
                     user_agent: user_agent,
                     **kwargs)
        end

        #
        # Performs a `OPTIONS` request for the given URI.
        #
        # @param [URI::HTTP, String] url_or_path
        #   Optional URL to create the HTTP request for.
        #
        # @!macro request_kwargs
        # @!macro connect_kwargs
        #
        # @yield [response]
        #   If a block is given it will be passed the received HTTP response.
        #
        # @yieldparam [Net::HTTPRresponse] response
        #   The received HTTP response object.
        #
        # @return [Net::HTTPResponse]
        #   The new HTTP Request object.
        #
        def http_options(url_or_path, ssl:        nil,
                                      proxy:      http_proxy,
                                      user_agent: http_user_agent,
                                      **kwargs,&block)
          url = url_for(url_or_path)

          super(url, ssl:        ssl,
                     proxy:      proxy,
                     user_agent: user_agent,
                     **kwargs)
        end

        #
        # Performs a `OPTIONS` HTTP request for the given URI and parses the
        # `Allow` response header.
        #
        # @param [URI::HTTP, String] url_or_path
        #   Optional URL to create the HTTP request for.
        #
        # @!macro request_kwargs
        # @!macro connect_kwargs
        #
        # @yield [response]
        #   If a block is given it will be passed the received HTTP response.
        #
        # @yieldparam [Net::HTTPRresponse] response
        #   The received HTTP response object.
        #
        # @return [Array<Symbol>]
        #   The allowed HTTP request methods for the given URL.
        #
        def http_allowed_methods(url_or_path, ssl:        nil,
                                              proxy:      http_proxy,
                                              user_agent: http_user_agent,
                                              **kwargs,&block)
          url = url_for(url_or_path)

          super(url, ssl:        ssl,
                     proxy:      proxy,
                     user_agent: user_agent,
                     **kwargs)
        end

        #
        # Performs a `PATCH` request for the given URI.
        #
        # @param [URI::HTTP, String] url_or_path
        #   Optional URL to create the HTTP request for.
        #
        # @!macro request_kwargs
        # @!macro connect_kwargs
        #
        # @yield [response]
        #   If a block is given it will be passed the received HTTP response.
        #
        # @yieldparam [Net::HTTPRresponse] response
        #   The received HTTP response object.
        #
        # @return [Net::HTTPResponse]
        #   The new HTTP Request object.
        #
        # @see Network::HTTP.patch
        #
        def http_patch(url_or_path, ssl:        nil,
                                    proxy:      http_proxy,
                                    user_agent: http_user_agent,
                                    **kwargs,&block)
          url = url_for(url_or_path)

          super(url, ssl:        ssl,
                     proxy:      proxy,
                     user_agent: user_agent,
                     **kwargs)
        end

        #
        # Performs a `POST` request for the given URI.
        #
        # @param [URI::HTTP, String] url_or_path
        #   Optional URL to create the HTTP request for.
        #
        # @!macro request_kwargs
        # @!macro connect_kwargs
        #
        # @yield [response]
        #   If a block is given it will be passed the received HTTP response.
        #
        # @yieldparam [Net::HTTPRresponse] response
        #   The received HTTP response object.
        #
        # @return [Net::HTTPResponse]
        #   The new HTTP Request object.
        #
        def http_post(url_or_path, ssl:        nil,
                                   proxy:      http_proxy,
                                   user_agent: http_user_agent,
                                   **kwargs,&block)
          url = url_for(url_or_path)

          super(url, ssl:        ssl,
                     proxy:      proxy,
                     user_agent: user_agent,
                     **kwargs)
        end

        #
        # Performs a `POST` request on the given URI and returns the response
        # headers.
        #
        # @param [URI::HTTP, String] url_or_path
        #   Optional URL to create the HTTP request for.
        #
        # @!macro request_kwargs
        # @!macro connect_kwargs
        #
        # @return [Hash{String => String}]
        #   The response headers.
        #
        def http_post_headers(url_or_path, ssl:        nil,
                                           proxy:      http_proxy,
                                           user_agent: http_user_agent,
                                           **kwargs)
          url = url_for(url_or_path)

          super(url, ssl:        ssl,
                     proxy:      proxy,
                     user_agent: user_agent,
                     **kwargs)
        end

        #
        # Performs a `POST` request for the given URI and returns the
        # response body.
        #
        # @param [URI::HTTP, String] url_or_path
        #   Optional URL to create the HTTP request for.
        #
        # @!macro request_kwargs
        # @!macro connect_kwargs
        #
        # @return [String]
        #   The response body.
        #
        def http_post_body(url_or_path, ssl:        nil,
                                        proxy:      http_proxy,
                                        user_agent: http_user_agent,
                                        **kwargs)
          url = url_for(url_or_path)

          super(url, ssl:        ssl,
                     proxy:      proxy,
                     user_agent: user_agent,
                     **kwargs)
        end

        #
        # Performs a `PROPFIND` request for the given URI.
        #
        # @param [URI::HTTP, String] url_or_path
        #   Optional URL to create the HTTP request for.
        #
        # @!macro request_kwargs
        # @!macro connect_kwargs
        #
        # @yield [response]
        #   If a block is given it will be passed the received HTTP response.
        #
        # @yieldparam [Net::HTTPRresponse] response
        #   The received HTTP response object.
        #
        # @return [Net::HTTPResponse]
        #   The new HTTP Request object.
        #
        def http_propfind(url_or_path, ssl:        nil,
                                       proxy:      http_proxy,
                                       user_agent: http_user_agent,
                                       **kwargs,&block)
          url = url_for(url_or_path)

          super(url, ssl:        ssl,
                     proxy:      proxy,
                     user_agent: user_agent,
                     **kwargs)
        end

        alias http_prop_find http_propfind

        #
        # Performs a `PROPPATCH` request for the given URI.
        #
        # @param [URI::HTTP, String] url_or_path
        #   Optional URL to create the HTTP request for.
        #
        # @!macro request_kwargs
        # @!macro connect_kwargs
        #
        # @yield [response]
        #   If a block is given it will be passed the received HTTP response.
        #
        # @yieldparam [Net::HTTPRresponse] response
        #   The received HTTP response object.
        #
        # @return [Net::HTTPResponse]
        #   The new HTTP Request object.
        #
        def http_proppatch(url_or_path, ssl:        nil,
                                        proxy:      http_proxy,
                                        user_agent: http_user_agent,
                                        **kwargs,&block)
          url = url_for(url_or_path)

          super(url, ssl:        ssl,
                     proxy:      proxy,
                     user_agent: user_agent,
                     **kwargs)
        end

        alias http_prop_patch http_proppatch

        #
        # Performs a `PUT` request for the given URI.
        #
        # @param [URI::HTTP, String] url_or_path
        #   Optional URL to create the HTTP request for.
        #
        # @!macro request_kwargs
        # @!macro connect_kwargs
        #
        # @yield [response]
        #   If a block is given it will be passed the received HTTP response.
        #
        # @yieldparam [Net::HTTPRresponse] response
        #   The received HTTP response object.
        #
        # @return [Net::HTTPResponse]
        #   The new HTTP Request object.
        #
        def http_put(url_or_path, ssl:        nil,
                                  proxy:      http_proxy,
                                  user_agent: http_user_agent,
                                  **kwargs,&block)
          url = url_for(url_or_path)

          super(url, ssl:        ssl,
                     proxy:      proxy,
                     user_agent: user_agent,
                     **kwargs)
        end

        #
        # Performs a `TRACE` request for the given URI.
        #
        # @param [URI::HTTP, String] url_or_path
        #   Optional URL to create the HTTP request for.
        #
        # @!macro request_kwargs
        # @!macro connect_kwargs
        #
        # @yield [response]
        #   If a block is given it will be passed the received HTTP response.
        #
        # @yieldparam [Net::HTTPRresponse] response
        #   The received HTTP response object.
        #
        # @return [Net::HTTPResponse]
        #   The new HTTP Request object.
        #
        def http_trace(url_or_path, ssl:        nil,
                                    proxy:      http_proxy,
                                    user_agent: http_user_agent,
                                    **kwargs,&block)
          url = url_for(url_or_path)

          super(url, ssl:        ssl,
                     proxy:      proxy,
                     user_agent: user_agent,
                     **kwargs)
        end

        #
        # Performs a `UNLOCK` request for the given URI.
        #
        # @param [URI::HTTP, String] url_or_path
        #   Optional URL to create the HTTP request for.
        #
        # @!macro request_kwargs
        # @!macro connect_kwargs
        #
        # @yield [response]
        #   If a block is given it will be passed the received HTTP response.
        #
        # @yieldparam [Net::HTTPRresponse] response
        #   The received HTTP response object.
        #
        # @return [Net::HTTPResponse]
        #   The new HTTP Request object.
        #
        def http_unlock(url_or_path, ssl:        nil,
                                     proxy:      http_proxy,
                                     user_agent: http_user_agent,
                                     **kwargs,&block)
          url = url_for(url_or_path)

          super(url, ssl:        ssl,
                     proxy:      proxy,
                     user_agent: user_agent,
                     **kwargs)
        end
      end
    end
  end
end
