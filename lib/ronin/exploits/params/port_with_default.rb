#
# ronin-exploits - A Ruby library for ronin-rb that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2022 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This file is part of ronin-exploits.
#
# ronin-exploits is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ronin-exploits is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with ronin-exploits.  If not, see <https://www.gnu.org/licenses/>.
#

module Ronin
  module Exploits
    module Params
      #
      # Adds the `port` param, but with a default value, to the exploit.
      #
      # ## Examples
      #
      #     class MyExploit < Ronin::Exploits::Exploit
      #
      #       include Ronin::Exploits::Params::PortWithDefault.new(80)
      #
      #     end
      #
      # @api public
      #
      # @since 1.0.0
      #
      class PortWithDefault < Module

        # The default value for the `port` param.
        #
        # @return [Integer]
        attr_reader :port

        #
        # Initializes the {DefaultPort} module.
        #
        # @param [Integer] port
        #   The default value for the `port` param.
        #
        def initialize(port)
          @port = port
        end

        #
        # Adds the required `port` param to the exploit class including
        # {Params::Port}.
        #
        # @param [Class<Exploit>] exploit
        #   The exploit class including {Params::Port}.
        #
        # @api private
        #
        def included(exploit)
          exploit.param :port, default: @port, desc: 'Remote port to connect to'
          exploit.include InstanceMethods
        end

        module InstanceMethods
          #
          # The `port` param.
          #
          # @return [Integer]
          #
          # @api public
          #
          def port
            params[:port]
          end
        end
      end
    end
  end
end
