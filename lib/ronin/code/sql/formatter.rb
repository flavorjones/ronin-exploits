#
# Ronin SQL - A Ronin library providing support for SQL related security
# tasks.
#
# Copyright (c) 2007-2010 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

require 'ronin/formatting/text'
require 'ronin/formatting/sql'

module Ronin
  module Code
    module SQL
      class Formatter

        # aliased keywords
        ALIASES = {
          :all => '*',
          :eq  => '=',
          :neq => '!=',
          :lt  => '<',
          :le  => '<=',
          :gt  => '>',
          :ge  => '>='
        }

        # Default case preference
        DEFAULT_CASE = :none

        # Default quoting preference
        DEFAULT_QUOTES = :single

        # Default parenthesis preference
        DEFAULT_PARENS = :more

        # Controls the casing of keywords
        attr_accessor :case

        # Controls the quoting of strings
        attr_accessor :quotes

        # Controls whether all strings will be hex-escaped
        attr_accessor :hex_escape

        # Controls the amount of parenthesis surrounding lists
        attr_accessor :parens
        
        # The String to separate text
        attr_accessor :space

        #
        # Sets the style options.
        #
        # @param [Hash] options
        #   Style options.
        #
        # @option options [Symbol] :case (DEFAULT_CASE)
        #   Controls the case of keywords. May be either `:none`, `:lower`,
        #   `:upper` or `:random`
        #
        # @option options [Symbol] :quotes (DEFAULT_QUOTES)
        #   Controls the quoting style of strings. May be either `:single`
        #   or `:double`.
        #
        # @option options [Boolean] :hex_escape (false)
        #   Forces all Strings to be hex-escaped.
        #
        # @option options [Symbol] :parens (DEFAULT_PARENS)
        #   Reduces the amount of parenthesis when tokenizing lists.
        #   May be either `:less`, `:more`.
        #
        # @option options [Boolean, String] :space
        #   Controls whether spaces are used to separate keywords,
        #   or other kinds of white-space.
        #
        # @since 0.3.0
        #
        def initialize(options={})
          @case       = options.fetch(:case,DEFAULT_CASE)
          @quotes     = options.fetch(:quotes,DEFAULT_QUOTES)
          @hex_escape = options.fetch(:hex_escape,false)
          @parens     = options.fetch(:parens,DEFAULT_PARENS)

          @space      = case options[:space]
                        when true, nil
                          ' '
                        when false
                          '/**/'
                        else
                          options[:space]
                        end
        end

        #
        # Default encoder method to create SQL code.
        #
        # @return [String]
        #   The encoded SQL.
        #
        # @since 0.3.0
        #
        def format(*elements)
          format_fragments(format_elements(elements))
        end

        def format_element(element)
          case element
          when Fragment
            format(*element.elements)
          when Function
            format_function(element.name,*element.arguments)
          when Hash
            format_hash(element)
          when Array
            format_list(*element)
          when Symbol
            format_keyword(ALIASES.fetch(element,element.to_s))
          when String
            format_string(element)
          when Integer
            format_integer(element)
          when Float
            format_float(element)
          when NilClass
            format_null
          when TrueClass, FalseClass
            format_boolean(element)
          else
            unless element.respond_to?(:to_sql)
              raise(TypeError,"#{element.inspect} does not define #to_sql")
            end

            element.to_sql
          end
        end

        #
        # Converts an Array of Ruby primatives into an Array of SQL tokens.
        #
        # @param [Array] elements
        #   The Array of Ruby data to convert into SQL fragments.
        #
        # @return [Array<String>]
        #   The SQL tokens.
        #
        # @raise [TypeError]
        #   An unknown type of object was passed as an argument to encode.
        #
        # @since 0.3.0
        #
        def format_elements(elements)
          elements.map { |element| format_element(element) }
        end

        #
        # Encodes the given keyword.
        #
        # @param [Symbol] name
        #   The name of the keyword.
        #
        # @return [String]
        #   The encoded keyword.
        #
        # @since 0.3.0
        #
        def format_keyword(name)
          name = name.to_s

          case @case
          when :lower
            name.downcase
          when :upper
            name.upcase
          when :random
            name.random_case
          else
            name
          end
        end

        #
        # Encodes a NULL keyword.
        #
        # @return [String]
        #   The encoded SQL NULL value.
        #
        # @since 0.3.0
        #
        def format_null
          format_keyword :null
        end

        #
        # Encodes a Boolean value.
        #
        # @param [Boolean] bool
        #   The Boolean value.
        #
        # @return [String]
        #   The encoded SQL Boolean value.
        #
        # @since 0.3.0
        #
        def format_boolean(bool)
          bool = case bool
                 when true
                   :true
                 else
                   :false
                 end

          format_keyword(bool)
        end

        #
        # Encodes the integer.
        #
        # @param [Integer, String] integer
        #   The integer to encode.
        #
        # @return [String]
        #   The encoded integer.
        #
        # @since 0.3.0
        #
        def format_integer(integer)
          integer.to_i.to_s
        end

        #
        # Encodes the floating point number.
        #
        # @param [Float, Integer, String] float
        #   The floating point number to encode.
        #
        # @return [String]
        #   The encoded floating point number.
        #
        # @since 0.3.0
        #
        def format_float(float)
          float.to_f.to_s
        end

        #
        # Encodes the string.
        #
        # @param [String, Integer] text
        #   The string to encode.
        #
        # @return [String]
        #   The encoded string.
        #
        # @since 0.3.0
        #
        def format_string(text)
          text = text.to_s

          if @hex_escape
            format_keyword(:hex) + "(#{text.sql_encode})"
          else
            text.sql_escape(@quotes)
          end
        end

        #
        # Wraps a value in parenthesis.
        #
        # @param [String] value
        #   The value to wrap.
        #
        # @return [String]
        #   The wrapped value.
        #
        # @since 0.3.0
        #
        def wrap_parens(value)
          "(#{value})"
        end

        #
        # Wraps a list of fragments in parenthesis.
        #
        # @param [Array<String>] fragments
        #   The fragments to wrap.
        #
        # @return [String]
        #   The wrapped comma-separated list.
        #
        # @since 0.3.0
        #
        def wrap_list(fragments)
          value = fragments.join(',')

          if (@parens == :more || (@parens == :less && fragments.empty?))
            value = wrap_parens(value)
          end

          return value
        end

        #
        # Encodes the list of elements.
        #
        # @param [Array] elements
        #   The list of elements to encode.
        #
        # @see wrap_list
        #
        # @since 0.3.0
        #
        def format_list(*elements)
          wrap_list(format_elements(elements))
        end

        #
        # Encodes a Hash.
        #
        # @param [Hash] hash
        #   The hash to be encoded.
        #
        # @return [String]
        #   The encoded Hash.
        #
        # @since 0.3.0
        #
        def format_hash(hash)
          wrap_list(hash.to_a.map { |name,value|
            name  = format_keyword(name)
            value = format_element(value)

            "#{name}=#{value}"
          })
        end

        #
        # Encodes a function call.
        #
        # @param [Symbol] name
        #   The name of the function to be called.
        #
        # @param [Array] arguments
        #   The optional arguments to call the function with.
        #
        # @return [String]
        #   The formatted function.
        #
        # @since 0.3.0
        #
        def format_function(name,*arguments)
          format_keyword(name) + format_list(*arguments)
        end

        #
        # Joins a series of SQL fragments with spaces.
        #
        # @param [Array<String>] fragments
        #   The fragments to join.
        #
        # @return [String]
        #   The joined fragments.
        #
        # @since 0.3.0
        #
        def format_fragments(fragments)
          fragments.join(@space)
        end

      end
    end
  end
end
