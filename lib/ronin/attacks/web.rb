#
# Ronin Exploits - A Ruby library for Ronin that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2012 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This file is part of Ronin Exploits.
#
# Ronin is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ronin is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ronin.  If not, see <http://www.gnu.org/licenses/>
#

require 'ronin/attacks/attack'
require 'ronin/attacks/url'
require 'ronin/network/http'
require 'ronin/url'
require 'ronin/model'

require 'uri/query_params'
require 'dm-timestamps'

module Ronin
  module Attacks
    #
    # Represents Attacks against URLs.
    #
    # @since 1.0.0
    #
    class Web

      include Attack, Network::HTTP
      include Model
      include DataMapper::Timestamps

      # The primary-key of the web vulnerability
      property :id, Serial

      # The HTTP request method to use
      property :request_method, String, :set => %w[
        GET HEAD POST PUT DELETE OPTIONS TRACE CONNECT
      ], :default => 'GET'

      # The HTTP header the vulnerability exists in
      property :header_name, String

      # The query-param the vulnerability exists in
      property :query_param, String

      # The original data from the query-param / header
      property :original_data, String

      # The URL the web vulnerability was found in
      belongs_to :url, :model => 'URL'

      # Defines the `created_at` property
      timestamps :created_at

      # The proxy to use when exploiting the web vulnerability
      attr_accessor :proxy

      # Additional headers to send
      attr_accessor :headers

      # The Session Cookie to use when exploiting the web vulnerability
      attr_accessor :cookie

      # The Referer Header to send when exploiting the web vulnerability
      attr_accessor :referer

      # The User-Agent Header to send when exploiting the web vulnerability
      attr_accessor :user_agent

      #
      # Initializes the web attack.
      #
      # @param [Hash] attributes
      #   Additional attributes.
      #
      # @api public
      #
      def initialize(attributes={})
        @proxy      = attributes.delete(:proxy)
        @headers    = (attributes.delete(:headers) || {})
        @cookie     = attributes.delete(:cookie)
        @referer    = attributes.delete(:referer)
        @user_agent = attributes.delete(:user_agent)

        super(attributes)
      end

      #
      # Tests if the URI is vulnerable to the Web Attack.
      #
      # @param [URI::HTTP, String] uri
      #   The URL to test.
      #
      # @param [Hash] options
      #   Additional options for {#initialize}.
      #
      # @return [Web]
      #   The first successful Web Attack.
      #
      # @api public
      #
      def self.test(uri,options={})
        uri = URI(uri) unless uri.kind_of?(URI)
        url = URL.from(uri)

        uri.query_params.each do |name,value|
          attack = new(options.merge(
            :url           => url,
            :query_param   => name,
            :original_data => value
          ))

          return attack if attack.vulnerable?
        end

        return nil
      end

      #
      # The URI to attack.
      #
      # @return [URI::HTTP]
      #   The vulnerable URI.
      #
      # @api semipublic
      #
      def original_uri
        @original_uri ||= self.url.to_uri
      end

      #
      # The normal un-injected HTTP Headers.
      #
      # @return [Hash{String => String}]
      #   The normal HTTP Headers.
      #
      # @api semipublic
      #
      def original_headers
        new_headers = headers.clone

        # set additional headers
        new_headers['Cookie']     = @cookie     if @cookie
        new_headers['Referer']    = @referer    if @referer
        new_headers['User-Agent'] = @user_agent if @user_agent

        return new_headers
      end

      #
      # The value in the vulnerable query-param or header.
      #
      # @return [String, nil]
      #   The value that will be injected.
      #
      # @api semipublic
      #
      def original_value
        if self.query_param
          original_uri.query_params[self.query_param]
        elsif self.header_name
          original_headers[self.header_name]
        end
      end

      #
      # The normal un-injected HTTP response.
      #
      # @return [Net::HTTP::Response]
      #   The HTTP response.
      #
      # @api semipublic
      #
      def normal_response
        @normal_response ||= http_request(
          :url     => original_uri,
          :headers => original_headers
        )
      end

      #
      #
      # The normal un-injected HTTP response body.
      #
      # @return [String]
      #   The body from the normal response.
      #
      # @api semipublic
      #
      # @see #normal_response
      #
      def normal_body
        normal_response.body
      end

      #
      # Injects data into the normal query-param or header value.
      #
      # @param [Hash, String] options
      #   The injection data.
      #
      # @option options [String] :append
      #   Data to append to the String.
      #
      # @option options [String] :prepend
      #   Data to prepend to the String.
      #
      # @option options [String] :insert
      #   Data to insert randomly into the middle of the String.
      #
      # @return [String]
      #   The injected value.
      #
      # @api semipublic
      #
      def inject(options={})
        return options.to_s unless options.kind_of?(Hash)

        injected = original_value.to_s.dup

        if options.has_key?(:insert)
          index = rand(injected.length - 1) + 1

          injected.insert(index,options[:insert].to_s)
        end

        if options.has_key?(:append)
          injected << options[:append].to_s
        end

        if options.has_key?(:prepend)
          injected.insert(0,options[:prepend].to_s)
        end

        return injected
      end

      #
      # Creates an attack URI by injecting the data into the vulnerable
      # query-param.
      #
      # @param [Array] arguments
      #   The injection arguments.
      #
      # @return [URI::HTTP]
      #   The attack URI.
      #
      # @see #inject
      #
      # @api semipublic
      #
      def attack_uri(*arguments)
        new_uri = original_uri.clone

        if self.query_param
          # inject data into the vulnerable query-param
          new_uri.query_params[self.query_param] = inject(*arguments)
        end

        return new_uri
      end

      #
      # Creates attack Headers by injecting the data into the vulnerable
      # HTTP Header.
      #
      # @param [Array] arguments
      #   The injection arguments.
      #
      # @return [Hash]
      #   The attack Headers.
      #
      # @see #inject
      #
      # @api semipublic
      #
      def attack_headers(*arguments)
        new_headers = original_headers

        if self.header_name
          # inject data into the vulnerable header
          new_headers[self.header_name] = inject(*arguments)
        end

        return new_headers
      end

      #
      # Exploits the vulnerable URL.
      #
      # @param [Array] arguments
      #   The arguments to pass to {#attack_uri} and {#attack_headers}.
      #
      # @return [Net::HTTP::Response]
      #   The response from the server.
      #
      # @see #attack_uri
      # @see #attack_headers
      #
      # @api public
      #
      def exploit!(*arguments,&block)
        options = {
          :url     => attack_uri(*arguments),
          :headers => attack_headers(*arguments)
        }

        return http_request(options,&block)
      end

      #
      # Converts the web attack to a String.
      #
      # @return [String]
      #   The URL of the web attack.
      #
      # @api public
      #
      def to_s
        self.url.to_s
      end

      protected

      #
      # Performs an HTTP Request.
      #
      # @param [Hash] options
      #   Additional options.
      #
      # @option options [URI::HTTP] :url
      #   The URL to request.
      #
      # @option options [Hash{String => String}] :headers
      #   Additional headers to send.
      #
      # @return [Net::HTTP::Response]
      #   The HTTP Response.
      #
      # @api semipublic
      #
      def http_request(options={},&block)
        options = options.merge(
          :proxy  => proxy,
          :method => self.request_method
        )

        return super(options,&block)
      end

    end
  end
end
